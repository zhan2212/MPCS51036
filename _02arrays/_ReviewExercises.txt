#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R5.6 Parameters and return values.  The difference between an argument and a return value is that an argument is passed
into a method, whereas a return value is the value returned from it.

You can have n number of arguments, whereas you can only have one return value. By varying either the number and/or type of arguments,
you change the method's signature, which means you may overload a method. Varying the return value only does not change the
method's signature and therefore does not qualify the method for overloading.

Since Java5, you can even specify a variable number of arguments aka varargs which looks something like this:
 private String[] someMethod(int nGrade, String... strNickNames) {//implementation};
Notice that the varargs parameter "String... strNickNames" must be listed last.  Calling this method would look something like this:
 String[] strReturnValues = someMethod(99, "Jim", "Jamie", "James", "Jamey", "Jimmy", "Jimbo");

R5.8 Pseudocode
 Function tanslateLtter(s):
    res = ""
    for(i = 1 to s.length):
        if(s[i] == "A" or "B" or "C"):
            res.add("2")
        else if(s[i] == "D" or "E" or "F"):
            res.add("3")
        else if(s[i] == "G" or "H" or "I"):
            res.add("4")
        else if(s[i] == "J" or "K" or "L"):
            res.add("5")
        else if(s[i] == "M" or "N" or "O"):
            res.add("6")
        else if(s[i] == "P" or "Q" or "R" or "S"):
            res.add("7")
        else if(s[i] == "T" or "U" or "V"):
            res.add("8")
        else if(s[i] == "W" or "X" or "Y" or "Z"):
            res.add("9")
        else:
            res.add(s[i])
    return res

R5.10 Variable scope
i: line 5-7
b: line 6-7

i: line 12-14
n: line 12-14

a: line 19-25
b: line 19-25
n: line 22-23
i: line 22-23

result: 26

R5.14 Pass by value versus pass by reference
falseSwap() passes the value rather than reference.
Also, both a and b are local variable in function falseSwap(). The algorithm swaps a and b inside falseSwap()
but it will not affect any variable in main().

R6.3 Considering loops
a. 25
b. 13
c. 12
d. Error
e. 11
f. 25
g. 12
h. -1

R6.10 Enhanced for-loop
a. for (float x : values) { total = total + x; }
b.for (float x : Arrays.copyOfRange(values,1,4)) { total = total + x; }
c.
int i = 0;
for (float x : values) {
        if (x == target) { return i; }
        i += 1;
}


R6.23 Computing runs
Function findMaxLen(A):
    maxLen = 0
    currLen = 1
    for i = 1 to len(A)-1:
        if A[i] == A[i-1]:
            currLen += 1
        else:
            maxLen = max(maxLen,currLen)
            currLen = 1
    return maxLen

R6.29 Multi-dimensional arrays
•Fill all entries with 0.
    for (int i=0;i<values.length;i++){
        for (int j =0;j<values[0].length;j++){
            values[i][j] = 0;
        }
    }
•Fill elements alternately with 0s and 1s in a checkerboard pattern.
    for (int i=0;i<values.length;i++){
        for (int j =0;j<values[0].length;j++){
            if ((i+j)%2 == 1){
                values[i][j] = 1;
            }
            else{
                values[i][j] = 0;
            }
        }
    }
•Fill only the elements at the top and bottom row with zeroes.
    for (int i=0;i<values.length;i++){
        for (int j =0;j<values[0].length;j++){
            if (i == 0 || i == values.length-1){
                values[i][j] = 0;
            }
        }
    }
•Compute the sum of all elements.
    int total = 0;
    for (int i=0;i<values.length;i++){
        for (int j =0;j<values[0].length;j++){
            total += values[i][j];
        }
    }
    System.out.print(total);
•Print the array in tabular form.
    for (int i=0;i<values.length;i++){
        for (int j =0;j<values[0].length;j++){
            System.out.print("--");
        }
        System.out.println("-");
        for (int j =0;j<values[0].length;j++){
            System.out.print("|"+values[i][j]);
        }
        System.out.println("|");
    }
    for (int j =0;j<values[0].length;j++){
        System.out.print("--");
    }


R6.34 Understanding arrays
a. F
b. T
c. F
d. F
e. F
f. T

R7.1 Exceptions
We will throw "throws FileNotFoundException" exception when reading file that does not exist.
We will create a new file when writing a file that does not exist.

R7.6 Throwing and catching
Throw will return an error after finding an exception.
Try-catch will deal with the exception after finding it.

R7.7 Checked versus unchecked
The checked exception is the exception found when compiling the program. For example, when we try to
open a file that does not exist, such exception is checked.
The unchecked exception is the exception after compiling. For example, if we perform 5/0 in the program,
such exception is unchecked.

R7.8 Exceptions philosophy in Java
Because this is an unchecked exception, which we do not need to declare.

R7.11 What is an exception object
We can look into the exception object, perform some analysis and try to solve it.

R7.15 Scanner exceptions. Explain why these are either checked or unchecked.
nextInt() throws the exceptions of InputMismatchException, NoSuchElementException
and IllegalStateException. InputMismatchException and NoSuchElementException are checked,
while IllegalStateException is unchecked.

next() throws the exceptions of NoSuchElementException and IllegalStateException.
They are all unchecked exceptions. NoSuchElementException is checked and
IllegalStateException is unchecked.













